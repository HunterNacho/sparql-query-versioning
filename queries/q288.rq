PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX wdno: <http://www.wikidata.org/prop/novalue/>
PREFIX schema: <http://schema.org/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX bd: <http://www.bigdata.com/rdf#>
#Composers and their most-used tonality
#added before 2016-10
# Each composer???s most used tonality, with number of works in that tonality.
# (If this is ambiguous ??? multiple tonalities with the same number ??? there are multiple results for one composer.)
## The SPARQL for this is an evil perversion of three subqueries (one of them nested in another).
# To understand it, you have to go inside out??? follow the numbers.
SELECT ?composerLabel ?tonalityLabel ?count
WHERE
{
  {
    SELECT ?composer (MAX(?count) AS ?count)
    WHERE
    {
      {
        SELECT ?composer ?tonality (COUNT(?composition) AS ?count)
        WHERE
        {
          ?composition wdt:P86 ?composer;
                       wdt:P826 ?tonality.
        }
        GROUP BY ?composer ?tonality
        HAVING(COUNT(?composition) > 1)
      }
    }
    GROUP BY ?composer
  }
  {
    SELECT ?composer ?tonality (COUNT(?composition) AS ?count)
    WHERE
    {
      ?composition wdt:P86 ?composer;
                   wdt:P826 ?tonality.
    }
    GROUP BY ?composer ?tonality
    HAVING(COUNT(?composition) > 1)
  }
  OPTIONAL{?composer rdfs:label ?en . FILTER(LANG(?en) = "en")}
	BIND(str(COALESCE(?en,strafter(str(?composer),"http://www.wikidata.org/entity/"))) AS ?composerLabel)
  OPTIONAL{?tonality rdfs:label ?ten . FILTER(LANG(?ten) = "en")}
	BIND(str(COALESCE(?ten,strafter(str(?tonality),"http://www.wikidata.org/entity/"))) AS ?tonalityLabel)
}
ORDER BY DESC(?count) ?composerLabel ?tonalityLabel
